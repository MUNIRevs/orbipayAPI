<?php
/**
 * FundingAccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Com\Alacriti\Checkout\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orbipay-Checkout APIs
 *
 * API specification to use the Orbipay-Checkout APIs. This documentation covers the Merchant Account Management and Charge Management related APIs.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: checkout.orbipay@alacriti.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Com\Alacriti\Checkout\Client\Api;

use \Com\Alacriti\Checkout\Client\ApiClient;
use \Com\Alacriti\Checkout\Client\ApiException;
use \Com\Alacriti\Checkout\Client\Configuration;
use \Com\Alacriti\Checkout\Client\ObjectSerializer;

/**
 * FundingAccountApi Class Doc Comment
 *
 * @category Class
 * @package  Com\Alacriti\Checkout\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FundingAccountApi
{
    /**
     * API Client
     *
     * @var \Com\Alacriti\Checkout\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Com\Alacriti\Checkout\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Com\Alacriti\Checkout\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Com\Alacriti\Checkout\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Com\Alacriti\Checkout\Client\ApiClient $apiClient set the API client
     *
     * @return FundingAccountApi
     */
    public function setApiClient(\Com\Alacriti\Checkout\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation confirmAddFundingAccount
     *
     * Confirm Add Funding Account
     *
     * @param string $client_id Unique partner Identifier, for example  cli_example5852kw555 (required)
     * @param string $digi_sign Generated Digital Signature for data using private key, for example BQYpeA50hrxKGjQs76oLRyTTbTEbFslxlZDkePpP6pz2gLFeSY9YekAnBP4BzacDz46kCLaQDIoGEUlY0ujlSD/3YoxRVmuvXGkSsG+7tHQidrwCmYa0qTGXM1xRq9x7Q77T8mV/rV9cuOIYr9Y9bjkpSi8XyDHwBBLzibCYOl7LG1loQA4CJ7cs8WKhqdPn1kR7gtl2AFbGp+BLuN1mvMYNiXfwsS1OYMzj0pEdDDL5xz8wRYjHSemixE2MzkUSSEzSCHrRz8KPG508uQ17i7KdszcWQjvwhow3NtCdHxYvXuv/tq0FJoCTJk92TtTe006viXQg5wu+KuUrO3yW1Q&#x3D;&#x3D; (required)
     * @param \Com\Alacriti\Checkout\Client\Model\ConfirmAddFundAcctRequest $confirm_add_fund_acct_request This JSON contains all the attributes to Confirm Charge. (required)
     * @throws \Com\Alacriti\Checkout\Client\ApiException on non-2xx response
     * @return \Com\Alacriti\Checkout\Client\Model\ConfirmAddFundAcctResponse
     */
    public function confirmAddFundingAccount($client_id, $digi_sign, $confirm_add_fund_acct_request, $isUpdateCall, $idAccount)
    {
        list($response) = $this->confirmAddFundingAccountWithHttpInfo($client_id, $digi_sign, $confirm_add_fund_acct_request, $isUpdateCall, $idAccount);
        return $response;
    }

    /**
     * Operation confirmAddFundingAccountWithHttpInfo
     *
     * Confirm Add Funding Account
     *
     * @param string $client_id Unique partner Identifier, for example  cli_example5852kw555 (required)
     * @param string $digi_sign Generated Digital Signature for data using private key, for example BQYpeA50hrxKGjQs76oLRyTTbTEbFslxlZDkePpP6pz2gLFeSY9YekAnBP4BzacDz46kCLaQDIoGEUlY0ujlSD/3YoxRVmuvXGkSsG+7tHQidrwCmYa0qTGXM1xRq9x7Q77T8mV/rV9cuOIYr9Y9bjkpSi8XyDHwBBLzibCYOl7LG1loQA4CJ7cs8WKhqdPn1kR7gtl2AFbGp+BLuN1mvMYNiXfwsS1OYMzj0pEdDDL5xz8wRYjHSemixE2MzkUSSEzSCHrRz8KPG508uQ17i7KdszcWQjvwhow3NtCdHxYvXuv/tq0FJoCTJk92TtTe006viXQg5wu+KuUrO3yW1Q&#x3D;&#x3D; (required)
     * @param \Com\Alacriti\Checkout\Client\Model\ConfirmAddFundAcctRequest $confirm_add_fund_acct_request This JSON contains all the attributes to Confirm Charge. (required)
     * @throws \Com\Alacriti\Checkout\Client\ApiException on non-2xx response
     * @return array of \Com\Alacriti\Checkout\Client\Model\ConfirmAddFundAcctResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmAddFundingAccountWithHttpInfo($client_id, $digi_sign, $confirm_add_fund_acct_request, $isUpdateCall, $idAccount)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling confirmAddFundingAccount');
        }
        if ((strlen($client_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for "$client_id" when calling FundingAccountApi.confirmAddFundingAccount, must be smaller than or equal to 50.');
        }
        if ((strlen($client_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$client_id" when calling FundingAccountApi.confirmAddFundingAccount, must be bigger than or equal to 0.');
        }
        if (!preg_match("/^[A-Za-z0-9-_]{0,50}$/", $client_id)) {
            throw new \InvalidArgumentException("invalid value for \"client_id\" when calling FundingAccountApi.confirmAddFundingAccount, must conform to the pattern /^[A-Za-z0-9-_]{0,50}$/.");
        }

        // verify the required parameter 'digi_sign' is set
        if ($digi_sign === null) {
            throw new \InvalidArgumentException('Missing the required parameter $digi_sign when calling confirmAddFundingAccount');
        }
        // verify the required parameter 'confirm_add_fund_acct_request' is set
        if ($confirm_add_fund_acct_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $confirm_add_fund_acct_request when calling confirmAddFundingAccount');
        }
        // verify the required parameter 'token_id' is set
        if ($confirm_add_fund_acct_request->getFundingAccountToken()->getToken() === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token_id when calling confirmAddFundingAccount');
        }

        // parse inputs
        $resourcePath = "/fundingaccounts/token";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($digi_sign !== null) {
            $headerParams['digi_sign'] = $this->apiClient->getSerializer()->toHeaderValue($digi_sign);
        }
        // body params
        $_tempBody = null;
        if (isset($confirm_add_fund_acct_request)) {
            $_tempBody = $confirm_add_fund_acct_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            if($isUpdateCall){
                $resourcePath = "/fundingaccounts/".$idAccount."/token";
                list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                    $resourcePath,
                    'POST',
                    $queryParams,
                    $httpBody,
                    $headerParams,
                    '\Com\Alacriti\Checkout\Client\Model\ConfirmAddFundAcctResponse',
                    '/fundingaccounts/'.$idAccount.'/token'
                );
            } else{
                list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                    $resourcePath,
                    'POST',
                    $queryParams,
                    $httpBody,
                    $headerParams,
                    '\Com\Alacriti\Checkout\Client\Model\ConfirmAddFundAcctResponse',
                    '/fundingaccounts/token'
                );
            }


            return [$this->apiClient->getSerializer()->deserialize($response, '\Com\Alacriti\Checkout\Client\Model\ConfirmAddFundAcctResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\ConfirmAddFundAcctResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\ErrorsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\ErrorsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\ErrorsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation validateAddFundingAccount
     *
     * Validate Add Funding Account
     *
     * @param string $client_id Unique partner Identifier, for example  cli_example5852kw555 (required)
     * @param string $user_agent partner browser name, for example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36 (required)
     * @param \Com\Alacriti\Checkout\Client\Model\ValidateAddFundAcctRequest $validate_add_fund_acct_request This JSON contains all the attributes for validate add funding account. (required)
     * @param string $origin Origin domain from which request is coming. Request could be rejected if origin is not white-listed with checkout (optional)
     * @throws \Com\Alacriti\Checkout\Client\ApiException on non-2xx response
     * @return \Com\Alacriti\Checkout\Client\Model\ValidateAddFundAcctResponse
     */
    public function validateAddFundingAccount($client_id, $user_agent, $validate_add_fund_acct_request, $origin = null)
    {
        list($response) = $this->validateAddFundingAccountWithHttpInfo($client_id, $user_agent, $validate_add_fund_acct_request, $origin);
        return $response;
    }

    /**
     * Operation validateAddFundingAccountWithHttpInfo
     *
     * Validate Add Funding Account
     *
     * @param string $client_id Unique partner Identifier, for example  cli_example5852kw555 (required)
     * @param string $user_agent partner browser name, for example Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36 (required)
     * @param \Com\Alacriti\Checkout\Client\Model\ValidateAddFundAcctRequest $validate_add_fund_acct_request This JSON contains all the attributes for validate add funding account. (required)
     * @param string $origin Origin domain from which request is coming. Request could be rejected if origin is not white-listed with checkout (optional)
     * @throws \Com\Alacriti\Checkout\Client\ApiException on non-2xx response
     * @return array of \Com\Alacriti\Checkout\Client\Model\ValidateAddFundAcctResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateAddFundingAccountWithHttpInfo($client_id, $user_agent, $validate_add_fund_acct_request, $origin = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling validateAddFundingAccount');
        }
        if ((strlen($client_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for "$client_id" when calling FundingAccountApi.validateAddFundingAccount, must be smaller than or equal to 50.');
        }
        if ((strlen($client_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$client_id" when calling FundingAccountApi.validateAddFundingAccount, must be bigger than or equal to 0.');
        }
        if (!preg_match("/^[A-Za-z0-9-_]{0,50}$/", $client_id)) {
            throw new \InvalidArgumentException("invalid value for \"client_id\" when calling FundingAccountApi.validateAddFundingAccount, must conform to the pattern /^[A-Za-z0-9-_]{0,50}$/.");
        }

        // verify the required parameter 'user_agent' is set
        if ($user_agent === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_agent when calling validateAddFundingAccount');
        }
        // verify the required parameter 'validate_add_fund_acct_request' is set
        if ($validate_add_fund_acct_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $validate_add_fund_acct_request when calling validateAddFundingAccount');
        }
        // parse inputs
        $resourcePath = "/fundingaccounts/validate/{CLIENT_ID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($origin !== null) {
            $queryParams['ORIGIN'] = $this->apiClient->getSerializer()->toQueryValue($origin);
        }
        // header params
        if ($user_agent !== null) {
            $headerParams['user_agent'] = $this->apiClient->getSerializer()->toHeaderValue($user_agent);
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                "{" . "CLIENT_ID" . "}",
                $this->apiClient->getSerializer()->toPathValue($client_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($validate_add_fund_acct_request)) {
            $_tempBody = $validate_add_fund_acct_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Com\Alacriti\Checkout\Client\Model\ValidateAddFundAcctResponse',
                '/fundingaccounts/validate/{CLIENT_ID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Com\Alacriti\Checkout\Client\Model\ValidateAddFundAcctResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\ValidateAddFundAcctResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\ErrorsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\ErrorsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\ErrorsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Com\Alacriti\Checkout\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
