<?php
/**
 * PaymentVO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Com\Alacriti\Checkout\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orbipay-Checkout APIs
 *
 * API specification to use the Orbipay-Checkout APIs. This documentation covers the Merchant Account Management and Charge Management related APIs.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: checkout.orbipay@alacriti.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Com\Alacriti\Checkout\Client\Model;

use \ArrayAccess;

/**
 * Charge Class Doc Comment
 *
 * @category    Class
 * @package     Com\Alacriti\Checkout\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentVO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     * @var string
     */
    protected static $swaggerModelName = 'PaymentVO';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id' => 'string',
        'url' => 'string',
        'payment_status' => 'string',
        'payment_reference' => 'string',
        'confirmation_number' => 'string',
        'amount' => 'string',
        'currency_code3d' => 'string',
        'payment_date' => 'string',
        'custom_fields' => 'object',
        'payment_method' => 'string',
        'payment_request_date' => 'string',
        'expected_payment_settlement_date' => 'string',
        'payment_entry_date' => 'string',
        'payment_return_date' => 'string',
        'payment_schedule_type' => 'string',
        'payment_amount_type' => 'string',
        'return_code' => 'string',
        'customer_account_reference' => 'string',
        'verification_code' => 'string',
        'id_payment' => 'string',
        'payment_token' => '\Com\Alacriti\Checkout\Client\Model\PaymentToken',
        'funding_account' => '\Com\Alacriti\Checkout\Client\Model\FundingAccount',
        'payer' => '\Com\Alacriti\Checkout\Client\Model\Payer',
        'customer_account' => '\Com\Alacriti\Checkout\Client\Model\CustomerAccount',
        'fee' => '\Com\Alacriti\Checkout\Client\Model\Fee',
        'customer' => '\Com\Alacriti\Checkout\Client\Model\Customer',
	'error' => '\Com\Alacriti\Checkout\Client\Model\Error'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id' => null,
        'url' => null,
        'payment_status' => null,
        'payment_reference' => null,
        'confirmation_number' => null,
        'amount' => null,
        'currency_code3d' => null,
        'payment_date' => null,
        'custom_fields' => null,
        'payment_method' => null,
        'payment_request_date' => null,
        'expected_payment_settlement_date' => null,
        'payment_entry_date' => null,
        'payment_return_date' => null,
        'payment_schedule_type' => null,
        'payment_amount_type' => null,
        'return_code' => null,
        'customer_account_reference' => null,
        'verification_code' =>  null,
        'id_payment' => null,
        'payment_token' => null,
        'funding_account' => null,
        'payer' => null,
        'customer_account' => null,
        'fee' => null,
        'customer' => null,
	'error' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'payment_status' => 'payment_status',
        'payment_reference' => 'payment_reference',
        'confirmation_number' => 'confirmation_number',
        'amount' => 'amount',
        'currency_code3d' => 'currency_code3d',
        'payment_date' => 'payment_date',
        'custom_fields' => 'custom_fields',
        'payment_method' => 'payment_method',
        'payment_request_date' => 'payment_request_date',
        'expected_payment_settlement_date' => 'expected_payment_settlement_date',
        'payment_entry_date' => 'payment_entry_date',
        'payment_return_date' => 'payment_return_date',
        'payment_schedule_type' => 'payment_schedule_type',
        'payment_amount_type' => 'payment_amount_type',
        'return_code' => 'return_code',
        'customer_account_reference' => 'customer_account_reference',
        'verification_code' => 'verification_code',
        'id_payment' => 'id_payment',
        'payment_token' => 'payment_token',
        'funding_account' => 'funding_account',
        'payer' => 'payer',
        'customer_account' => 'customer_account',
        'fee' => 'fee',
        'customer' => 'customer',
	'error' => 'error'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'payment_status' => 'setPaymentStatus',
        'payment_reference' => 'setPaymentReference',
        'confirmation_number' => 'setConfirmationNumber',
        'amount' => 'setAmount',
        'currency_code3d' => 'setCurrencyCode3d',
        'payment_date' => 'setPaymentDate',
        'custom_fields' => 'setCustomFields',
        'payment_method' => 'setPaymentMethod',
        'payment_request_date' => 'setPaymentRequestDate',
        'expected_payment_settlement_date' => 'setExpectedPaymentSettlementDate',
        'payment_entry_date' => 'setPaymentEntryDate',
        'payment_return_date' => 'setPaymentReturnDate',
        'payment_schedule_type' => 'setPaymentScheduleType',
        'payment_amount_type' => 'setPaymentAmountType',
        'return_code' => 'setReturnCode',
        'customer_account_reference' => 'setCustomerAccountReference',
        'verification_code' => 'setVerificationCode',
        'id_payment' => 'setIdPayment',
        'payment_token' => 'setPaymentToken',
        'funding_account' => 'setFundingAccount',
        'payer' => 'setPayer',
        'customer_account' => 'setCustomerAccount',
        'fee' => 'setFee',
        'customer' => 'setCustomer',
	'error' => 'setError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'payment_status' => 'getPaymentStatus',
        'payment_reference' => 'getPaymentReference',
        'confirmation_number' => 'getConfirmationNumber',
        'amount' => 'getAmount',
        'currency_code3d' => 'getCurrencyCode3d',
        'payment_date' => 'getPaymentDate',
        'custom_fields' => 'getCustomFields',
        'payment_method' => 'getPaymentMethod',
        'payment_request_date' => 'getPaymentRequestDate',
        'expected_payment_gettlement_date' => 'getExpectedPaymentgettlementDate',
        'payment_entry_date' => 'getPaymentEntryDate',
        'payment_return_date' => 'getPaymentReturnDate',
        'payment_schedule_type' => 'getPaymentScheduleType',
        'payment_amount_type' => 'getPaymentAmountType',
        'return_code' => 'getReturnCode',
        'customer_account_reference' => 'getCustomerAccountReference',
        'verification_code' => 'getVerificationCode',
        'id_payment' => 'getIdPayment',
        'payment_token' => 'getPaymentToken',
        'funding_account' => 'getFundingAccount',
        'payer' => 'getPayer',
        'customer_account' => 'getCustomerAccount',
        'fee' => 'getFee',
        'customer' => 'getCustomer',
	'error' => 'getError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PAYMENT_STATUS_SCHEDULED = 'scheduled';
    const PAYMENT_STATUS_CANCELLED = 'cancelled';
    const PAYMENT_STATUS_PROCESSING = 'processing';
    const PAYMENT_STATUS_PROCESSED = 'processed';
    const PAYMENT_STATUS_RETURNED = 'returned';
    const PAYMENT_STATUS_DECLINED = 'declined';
    const PAYMENT_STATUS_DISPUTED = 'disputed';
    const PAYMENT_STATUS_REFUNDED = 'refunded';
    const PAYMENT_STATUS_FAILED = 'failed';
    const PAYMENT_STATUS_SUBMITTED = 'submitted';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_SCHEDULED,
            self::PAYMENT_STATUS_CANCELLED,
            self::PAYMENT_STATUS_PROCESSING,
            self::PAYMENT_STATUS_PROCESSED,
            self::PAYMENT_STATUS_RETURNED,
            self::PAYMENT_STATUS_DECLINED,
            self::PAYMENT_STATUS_DISPUTED,
            self::PAYMENT_STATUS_REFUNDED,
            self::PAYMENT_STATUS_FAILED,
            self::PAYMENT_STATUS_SUBMITTED,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['payment_reference'] = isset($data['payment_reference']) ? $data['payment_reference'] : null;
        $this->container['confirmation_number'] = isset($data['confirmation_number']) ? $data['confirmation_number'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency_code3d'] = isset($data['currency_code3d']) ? $data['currency_code3d'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['payment_request_date'] = isset($data['payment_request_date']) ? $data['payment_request_date'] : null;
        $this->container['expected_payment_gettlement_date'] = isset($data['expected_payment_gettlement_date']) ? $data['expected_payment_gettlement_date'] : null;
        $this->container['payment_entry_date'] = isset($data['payment_entry_date']) ? $data['payment_entry_date'] : null;
        $this->container['payment_return_date'] = isset($data['payment_return_date']) ? $data['payment_return_date'] : null;
        $this->container['payment_schedule_type'] = isset($data['payment_schedule_type']) ? $data['payment_schedule_type'] : null;
        $this->container['payment_amount_type'] = isset($data['payment_amount_type']) ? $data['payment_amount_type'] : null;
        $this->container['return_code'] = isset($data['return_code']) ? $data['return_code'] : null;
        $this->container['customer_account_reference'] = isset($data['customer_account_reference']) ? $data['customer_account_reference'] : null;
        $this->container['verification_code'] = isset($data['verification_code']) ? $data['verification_code'] : null;
        $this->container['id_payment'] = isset($data['id_payment']) ? $data['id_payment'] : null;
        $this->container['payment_token'] = isset($data['payment_token']) ? $data['payment_token'] : null;
        $this->container['funding_account'] = isset($data['funding_account']) ? $data['funding_account'] : null;
        $this->container['payer'] = isset($data['payer']) ? $data['payer'] : null;
        $this->container['customer_account'] = isset($data['customer_account']) ? $data['customer_account'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
	$this->container['error'] = isset($data['error']) ? $data['error'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id is a unique identifier assigned to a payment in OrbiPay-Checkout system.
     * @return $this
     */
    public function setId($id)
    {

        $this->container['id'] = $id;

        return $this;
    }


    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets Fee
     * @return string
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets Fee
     * @param string $fee
     * @return $this
     */
    public function setFee($fee)
    {

        $this->container['fee'] = $fee;

        return $this;
    }
    /**
     * Gets Customer
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets Customer
     * @param Customer $customer
     * @return $this
     */
    public function setCustomer($customer)
    {

        $this->container['customer'] = $customer;

        return $this;
    }

     /**
     * Gets Error
     * 
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets Error
     * 
     * @return $this
     */
    public function setError($error)
    {

        $this->container['error'] = $error;

        return $this;
    }
    
    /**
     * Gets payment_status
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     * @param string $payment_status
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {

        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets payment_reference
     * @return string
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     * @param string $payment_reference
     * @return $this
     */
    public function setPaymentReference($payment_reference)
    {

        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets confirmation_number
     * @return string
     */
    public function getConfirmationNumber()
    {
        return $this->container['confirmation_number'];
    }

    /**
     * Sets confirmation_number
     * @param string $confirmation_number
     * @return $this
     */
    public function setConfirmationNumber($confirmation_number)
    {
        $this->container['confirmation_number'] = $confirmation_number;

        return $this;
    }

    /**
     * Gets amount
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param string $amount
     * @return $this
     */
    public function setAmount($amount)
    {

        $this->container['amount'] = $amount;
        return $this;
    }

    /**
     * Gets currency_code3d
     * @return string
     */
    public function getCurrencyCode3d()
    {
        return $this->container['currency_code3d'];
    }

    /**
     * Sets currency_code3d
     * @param string $currency_code3d
     * @return $this
     */
    public function setCurrencyCode3d($currency_code3d)
    {

        $this->container['currency_code3d'] = $currency_code3d;

        return $this;
    }

    /**
     * Gets payment_date
     * @return string
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     * @param string $payment_date
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {

        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Com\Alacriti\Checkout\Client\Model\FieldStringMap
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Com\Alacriti\Checkout\Client\Model\FieldStringMap $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }




    /**
     * Gets payment_method
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     * @param string $payment_method
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }


    /**
     * Gets payment_request_date
     * @return string
     */
    public function getPaymentRequestDate()
    {
        return $this->container['payment_request_date'];
    }

    /**
     * Sets payment_request_date
     * @param string $payment_request_date payment date should be in mm/dd/yyyy.
     * @return $this
     */
    public function setPaymentRequestDate($payment_request_date)
    {
        $this->container['payment_request_date'] = $payment_request_date;

        return $this;
    }

    /**
     * Gets expected_payment_settlement_date
     * @return string
     */
    public function getExpectedPaymentgettlementDate()
    {
        return $this->container['expected_payment_settlement_date'];
    }

    /**
     * Sets expected_payment_settlement_date
     * @param string $expected_payment_settlement_date
     * @return $this
     */
    public function setExpectedPaymentSettlementDate($expected_payment_settlement_date)
    {
        $this->container['expected_payment_settlement_date'] = $expected_payment_settlement_date;

        return $this;
    }

    /**
     * Gets payment_entry_date
     * @return string
     */
    public function getPaymentEntryDate()
    {
        return $this->container['payment_entry_date'];
    }

    /**
     * Sets payment_entry_date
     * @param string $payment_entry_date
     * @return $this
     */
    public function setPaymentEntryDate($payment_entry_date)
    {
        $this->container['payment_entry_date'] = $payment_entry_date;

        return $this;
    }

    /**
     * Gets payment_return_date
     * @return string
     */
    public function getPaymentReturnDate()
    {
        return $this->container['payment_return_date'];
    }

    /**
     * Sets payment_return_date
     * @param string $payment_return_date
     * @return $this
     */
    public function setPaymentReturnDate($payment_return_date)
    {
        $this->container['payment_return_date'] = $payment_return_date;

        return $this;
    }

    /**
     * Gets payment_schedule_type
     * @return string
     */
    public function getPaymentScheduleType()
    {
        return $this->container['payment_schedule_type'];
    }

    /**
     * Sets payment_schedule_type
     * @param string $payment_schedule_type
     * @return $this
     */
    public function setPaymentScheduleType($payment_schedule_type)
    {
        $this->container['payment_schedule_type'] = $payment_schedule_type;

        return $this;
    }

    public function getVerificationCode()
    {
        return $this->container['verification_code'];
    }

    public function setVerificationCode($verification_code)
    {
        $this->container['verification_code'] = $verification_code;

        return $this;
    }

    public function getReturnCode()
    {
        return $this->container['return_code'];
    }

    public function setReturnCode($return_code)
    {
        $this->container['return_code'] = $return_code;

        return $this;
    }

    public function getIdPayment()
    {
        return $this->container['id_payment'];
    }

    public function setIdPayment($return_code)
    {
        $this->container['id_payment'] = $id_payment;

        return $this;
    }

    public function getCustomerAccountReference()
    {
        return $this->container['customer_account_reference'];
    }

    public function setCustomerAccountReference($customer_account_reference)
    {
        $this->container['customer_account_reference'] = $customer_account_reference;

        return $this;
    }

    public function getPaymentToken()
    {
        return $this->container['payment_token'];
    }

    public function setPaymentToken($payment_token)
    {
        $this->container['payment_token'] = $payment_token;

        return $this;
    }

    public function getFundingAccount()
    {
        return $this->container['funding_account'];
    }

    public function setFundingAccount($funding_account)
    {
        $this->container['funding_account'] = $funding_account;

        return $this;
    }

    public function getPayer()
    {
        return $this->container['payer'];
    }

    public function setPayer($payer)
    {
        $this->container['payer'] = $payer;

        return $this;
    }

    public function getCustomerAccount()
    {
        return $this->container['customer_account'];
    }

    public function setCustomerAccount($customer_account)
    {
        $this->container['customer_account'] = $customer_account;

        return $this;
    }

    public function setPaymentAmountType($payment_amount_type)
    {
        $this->container['payment_amount_type'] = $payment_amount_type;

        return $this;
    }
    public function getPaymentAmountType()
    {
        return $this->container['payment_amount_type'];
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Com\Alacriti\Checkout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Com\Alacriti\Checkout\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
