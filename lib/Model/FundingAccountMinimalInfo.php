<?php
/**
 * FundingAccountMinimalInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Com\Alacriti\Checkout\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orbipay-Checkout APIs
 *
 * API specification to use the Orbipay-Checkout APIs. This documentation covers the Merchant Account Management and Charge Management related APIs.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: checkout.orbipay@alacriti.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Com\Alacriti\Checkout\Client\Model;

use \ArrayAccess;

/**
 * FundingAccountMinimalInfo Class Doc Comment
 *
 * @category    Class
 * @package     Com\Alacriti\Checkout\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FundingAccountMinimalInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Funding_Account_Minimal_Info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'aba_routing_number' => 'string',
        'account_issuing_institution_name' => 'string',
        'account_number' => 'string',
        'currency_code3d' => 'string',
        'account_type' => 'string',
        'account_subtype' => 'string',
        'expiry_date' => 'string',
        'account_holder_name' => 'string',
        'save_for_future_use' => 'string',
        'nickname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'aba_routing_number' => null,
        'account_issuing_institution_name' => null,
        'account_number' => null,
        'currency_code3d' => null,
        'account_type' => null,
        'account_subtype' => null,
        'expiry_date' => null,
        'account_holder_name' => null,
        'save_for_future_use' => null,
        'nickname' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'aba_routing_number' => 'aba_routing_number',
        'account_issuing_institution_name' => 'account_issuing_institution_name',
        'account_number' => 'account_number',
        'currency_code3d' => 'currency_code3d',
        'account_type' => 'account_type',
        'account_subtype' => 'account_subtype',
        'expiry_date' => 'expiry_date',
        'account_holder_name' => 'account_holder_name',
        'save_for_future_use' => 'save_for_future_use',
        'nickname' => 'nickname'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'aba_routing_number' => 'setAbaRoutingNumber',
        'account_issuing_institution_name' => 'setAccountIssuingInstitutionName',
        'account_number' => 'setAccountNumber',
        'currency_code3d' => 'setCurrencyCode3d',
        'account_type' => 'setAccountType',
        'account_subtype' => 'setAccountSubtype',
        'expiry_date' => 'setExpiryDate',
        'account_holder_name' => 'setAccountHolderName',
        'save_for_future_use' => 'setSaveForFutureUse',
        'nickname' => 'setNickname'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'aba_routing_number' => 'getAbaRoutingNumber',
        'account_issuing_institution_name' => 'getAccountIssuingInstitutionName',
        'account_number' => 'getAccountNumber',
        'currency_code3d' => 'getCurrencyCode3d',
        'account_type' => 'getAccountType',
        'account_subtype' => 'getAccountSubtype',
        'expiry_date' => 'getExpiryDate',
        'account_holder_name' => 'getAccountHolderName',
        'save_for_future_use' => 'getSaveForFutureUse',
        'nickname' => 'getNickname'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ACCOUNT_TYPE_BANK = 'bank';
    const ACCOUNT_TYPE_CARD = 'card';
    const ACCOUNT_SUBTYPE_SAVINGS = 'savings';
    const ACCOUNT_SUBTYPE_CHECKING = 'checking';
    const ACCOUNT_SUBTYPE_MONEY_MARKET = 'money_market';
    const ACCOUNT_SUBTYPE_VISA_CREDIT = 'visa_credit';
    const ACCOUNT_SUBTYPE_MASTERCARD_CREDIT = 'mastercard_credit';
    const ACCOUNT_SUBTYPE_AMERICAN_EXPRESS_CREDIT = 'american_express_credit';
    const ACCOUNT_SUBTYPE_DISCOVER_CREDIT = 'discover_credit';
    const ACCOUNT_SUBTYPE_VISA_DEBIT = 'visa_debit';
    const ACCOUNT_SUBTYPE_MASTERCARD_DEBIT = 'mastercard_debit';
    const ACCOUNT_SUBTYPE_DISCOVER_DEBIT = 'discover_debit';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_BANK,
            self::ACCOUNT_TYPE_CARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccountSubtypeAllowableValues()
    {
        return [
            self::ACCOUNT_SUBTYPE_SAVINGS,
            self::ACCOUNT_SUBTYPE_CHECKING,
            self::ACCOUNT_SUBTYPE_MONEY_MARKET,
            self::ACCOUNT_SUBTYPE_VISA_CREDIT,
            self::ACCOUNT_SUBTYPE_MASTERCARD_CREDIT,
            self::ACCOUNT_SUBTYPE_AMERICAN_EXPRESS_CREDIT,
            self::ACCOUNT_SUBTYPE_DISCOVER_CREDIT,
            self::ACCOUNT_SUBTYPE_VISA_DEBIT,
            self::ACCOUNT_SUBTYPE_MASTERCARD_DEBIT,
            self::ACCOUNT_SUBTYPE_DISCOVER_DEBIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['aba_routing_number'] = isset($data['aba_routing_number']) ? $data['aba_routing_number'] : null;
        $this->container['account_issuing_institution_name'] = isset($data['account_issuing_institution_name']) ? $data['account_issuing_institution_name'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['currency_code3d'] = isset($data['currency_code3d']) ? $data['currency_code3d'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['account_subtype'] = isset($data['account_subtype']) ? $data['account_subtype'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['account_holder_name'] = isset($data['account_holder_name']) ? $data['account_holder_name'] : null;
        $this->container['save_for_future_use'] = isset($data['save_for_future_use']) ? $data['save_for_future_use'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Id is a unique identifier assigned to the funding account in OrbiPay-Checkout system.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets aba_routing_number
     * @return string
     */
    public function getAbaRoutingNumber()
    {
        return $this->container['aba_routing_number'];
    }

    /**
     * Sets aba_routing_number
     * @param string $aba_routing_number ABA Routing Number is mandatory for Bank Accounts.
     * @return $this
     */
    public function setAbaRoutingNumber($aba_routing_number)
    {
        $this->container['aba_routing_number'] = $aba_routing_number;

        return $this;
    }

    /**
     * Gets account_issuing_institution_name
     * @return string
     */
    public function getAccountIssuingInstitutionName()
    {
        return $this->container['account_issuing_institution_name'];
    }

    /**
     * Sets account_issuing_institution_name
     * @param string $account_issuing_institution_name
     * @return $this
     */
    public function setAccountIssuingInstitutionName($account_issuing_institution_name)
    {
        $this->container['account_issuing_institution_name'] = $account_issuing_institution_name;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number Account Number field is expected to be a unique field for the accounts in partner system.
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets currency_code3d
     * @return string
     */
    public function getCurrencyCode3d()
    {
        return $this->container['currency_code3d'];
    }

    /**
     * Sets currency_code3d
     * @param string $currency_code3d 3 character ISO currency code should be provided in currencyCode3d field default to USD.
     * @return $this
     */
    public function setCurrencyCode3d($currency_code3d)
    {
        $this->container['currency_code3d'] = $currency_code3d;

        return $this;
    }

    /**
     * Gets account_type
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     * @param string $account_type Account Type indicates the type of a funding account.
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets account_subtype
     * @return string
     */
    public function getAccountSubtype()
    {
        return $this->container['account_subtype'];
    }

    /**
     * Sets account_subtype
     * @param string $account_subtype Account Sub Type indicates the sub type of a funding account.
     * @return $this
     */
    public function setAccountSubtype($account_subtype)
    {
        $this->container['account_subtype'] = $account_subtype;

        return $this;
    }

    /**
     * Gets expiry_date
     * @return string
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     * @param string $expiry_date Expiry date of the account is of format mm/yy
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets account_holder_name
     * @return string
     */
    public function getAccountHolderName()
    {
        return $this->container['account_holder_name'];
    }

    /**
     * Sets account_holder_name
     * @param string $account_holder_name
     * @return $this
     */
    public function setAccountHolderName($account_holder_name)
    {
        $this->container['account_holder_name'] = $account_holder_name;

        return $this;
    }

    /**
     * Gets save_for_future_use
     * @return string
     */
    public function getSaveForFutureUse()
    {
        return $this->container['save_for_future_use'];
    }

    /**
     * Sets save_for_future_use
     * @param string $save_for_future_use true to use funding account for future payments, false otherwise.
     * @return $this
     */
    public function setSaveForFutureUse($save_for_future_use)
    {
        $this->container['save_for_future_use'] = $save_for_future_use;

        return $this;
    }

    /**
     * Gets nickname
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     * @param string $nickname The nickname by which a customer might want to identify the account.
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Com\Alacriti\Checkout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Com\Alacriti\Checkout\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


