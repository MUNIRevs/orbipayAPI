<?php
/**
 * CustomerAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Com\Alacriti\Checkout\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orbipay-Checkout APIs
 *
 * API specification to use the Orbipay-Checkout APIs. This documentation covers the Merchant Account Management and Charge Management related APIs.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: checkout.orbipay@alacriti.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Com\Alacriti\Checkout\Client\Model;

use \ArrayAccess;

/**
 * CustomerAccount Class Doc Comment
 *
 * @category    Class
 * @package     Com\Alacriti\Checkout\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomerAccount implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Customer_Account_Info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'customer_account_id' => 'string',
        'currentBalance' => 'string',
        'currentStatemenBalance' => 'string',
        'minimumPaymentDue' => 'string',
        'pastAmountDue' => 'string',
        'paymentDueDate' => 'string',
        'statementDate' => 'string',
        'account_id' => 'string',
        'nickname' => 'string',
        'account_number' => 'string',
        'status' => 'string',
        'id_account' => 'string',
        'url' => 'string',
        'custom_fields' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'customer_account_id' => null,
        'currentBalance' => null,
        'currentStatemenBalance' => null,
        'minimumPaymentDue' => null,
        'pastAmountDue' => null,
        'paymentDueDate' => null,
        'statementDate' => null,
        'account_id' => null,
        'nickname' =>  null,
        'account_number' => null,
        'status' => null,
        'id_account' => null,
        'url' => null,
        'custom_fields' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customer_account_id' => 'customer_account_id',
        'currentBalance' => 'currentBalance',
        'currentStatemenBalance' => 'currentStatemenBalance',
        'minimumPaymentDue' => 'minimumPaymentDue',
        'pastAmountDue' => 'pastAmountDue',
        'paymentDueDate' => 'paymentDueDate',
        'statementDate' => 'statementDate',
        'account_id' => 'account_id',
        'nickname' => 'nickname',
        'account_number' => 'account_number',
        'status' => 'string',
        'id_account' => 'string',
        'url' => 'url',
        'custom_fields' => 'custom_fields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customer_account_id' => 'setCustomerAccountId',
        'currentBalance' => 'setCurrentBalance',
        'currentStatemenBalance' => 'setCurrentStatemenBalance',
        'minimumPaymentDue' => 'setMinimumPaymentDue',
        'pastAmountDue' => 'setPastAmountDue',
        'paymentDueDate' => 'setPaymentDueDate',
        'statementDate' => 'setStatementDate',
        'account_id' => 'setAccountId',
        'nickname' => 'setNickname',
        'account_number' => 'setAccountNumber',
        'status' => 'setStatus',
        'id_account' => 'setIdAccount',
        'url' => 'setUrl',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customer_account_id' => 'getCustomerAccountId',
        'currentBalance' => 'getCurrentBalance',
        'currentStatemenBalance' => 'getCurrentStatemenBalance',
        'minimumPaymentDue' => 'getMinimumPaymentDue',
        'pastAmountDue' => 'getPastAmountDue',
        'paymentDueDate' => 'getPaymentDueDate',
        'statementDate' => 'getStatementDate',
        'account_id' => 'getAccountId',
        'nickname' => 'getNickname',
        'account_number' => 'getAccountNumber',
        'status' => 'getStatus',
        'id_account' => 'getIdAccount',
        'url' => 'getUrl',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customer_account_id'] = isset($data['customer_account_id']) ? $data['customer_account_id'] : null;
        $this->container['getCurrentBalance'] = isset($data['getCurrentBalance']) ? $data['getCurrentBalance'] : null;
        $this->container['currentStatemenBalance'] = isset($data['currentStatemenBalance']) ? $data['currentStatemenBalance'] : null;
        $this->container['minimumPaymentDue'] = isset($data['minimumPaymentDue']) ? $data['minimumPaymentDue'] : null;
        $this->container['pastAmountDue'] = isset($data['pastAmountDue']) ? $data['pastAmountDue'] : null;
        $this->container['paymentDueDate'] = isset($data['paymentDueDate']) ? $data['paymentDueDate'] : null;
        $this->container['statementDate'] = isset($data['statementDate']) ? $data['statementDate'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        //$this->container['account_holder_name'] = isset($data['account_holder_name']) ? $data['account_holder_name'] : null;
        $this->container['id_account'] = isset($data['id_account']) ? $data['id_account'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;//
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Customer Account Id is a unique identifier assigned to the account in OrbiPay-Checkout
     * @return $this
     */
    public function setId($id)
    {

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customer_account_id
     * @return string
     */
    public function getCustomerAccountId()
    {
        return $this->container['customer_account_id'];
    }

    /**
     * Sets customer_account_id
     * @param string $customer_account_id Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setCustomerAccountId($customer_account_id)
    {

        $this->container['customer_account_id'] = $customer_account_id;

        return $this;
    }

    /**
     * Gets currentBalance
     * @return string
     */
    public function getCurrentBalance()
    {
        return $this->container['currentBalance'];
    }

    /**
     * Sets currentBalance
     * @param string $currentBalance Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setCurrentBalance($currentBalance)
    {

        $this->container['currentBalance'] = $currentBalance;

        return $this;
    }
    /**
     * Gets currentStatemenBalance
     * @return string
     */
    public function getCurrentStatemenBalance()
    {
        return $this->container['currentStatemenBalance'];
    }

    /**
     * Sets currentStatemenBalance
     * @param string $currentStatemenBalance Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setCurrentStatemenBalance($currentStatemenBalance)
    {

        $this->container['currentStatemenBalance'] = $currentStatemenBalance;

        return $this;
    }
    /**
     * Gets minimumPaymentDue
     * @return string
     */
    public function getMinimumPaymentDue()
    {
        return $this->container['minimumPaymentDue'];
    }

    /**
     * Sets minimumPaymentDue
     * @param string $minimumPaymentDue Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setMinimumPaymentDue($minimumPaymentDue)
    {

        $this->container['minimumPaymentDue'] = $minimumPaymentDue;

        return $this;
    }
    /**
     * Gets pastAmountDue
     * @return string
     */
    public function getPastAmountDue()
    {
        return $this->container['pastAmountDue'];
    }

    /**
     * Sets pastAmountDue
     * @param string $pastAmountDue Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setPastAmountDue($pastAmountDue)
    {

        $this->container['pastAmountDue'] = $pastAmountDue;

        return $this;
    }
    /**
     * Gets paymentDueDate
     * @return string
     */
    public function getPaymentDueDate()
    {
        return $this->container['paymentDueDate'];
    }

    /**
     * Sets paymentDueDate
     * @param string $paymentDueDate Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setPaymentDueDate($paymentDueDate)
    {

        $this->container['paymentDueDate'] = $paymentDueDate;

        return $this;
    }
    /**
     * Gets statementDate
     * @return string
     */
    public function getStatementDate()
    {
        return $this->container['statementDate'];
    }

    /**
     * Sets statementDate
     * @param string $statementDate Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setStatementDate($statementDate)
    {

        $this->container['statementDate'] = $statementDate;

        return $this;
    }
    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setAccountId($account_id)
    {

        $this->container['account_id'] = $account_id;

        return $this;
    }
    /**
     * Gets nickname
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     * @param string $nickname Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setNickname($nickname)
    {

        $this->container['nickname'] = $nickname;

        return $this;
    }
    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setAccountNumber($account_number)
    {

        $this->container['account_number'] = $account_number;

        return $this;
    }
    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setUrl($url)
    {

        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Gets account_holder_name
     * @return string
     */
    public function getAccountHolderName()
    {
        return $this->container['account_holder_name'];
    }

    /**
     * Sets account_holder_name
     * @param string $account_holder_name Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setAccountHolderName($account_holder_name)
    {

        $this->container['account_holder_name'] = $account_holder_name;

        return $this;
    }
/**
     * Gets id_account
     * @return string
     */
    public function getIdAccount()
    {
        return $this->container['id_account'];
    }

    /**
     * Sets id_account
     * @param string $id_account Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setIdAccount($id_account)
    {

        $this->container['id_account'] = $id_account;

        return $this;
    }
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Customer Account Id is a unique identifier assigned to the account in partner's system.
     * @return $this
     */
    public function setStatus($status)
    {

        $this->container['status'] = $status;

        return $this;
    }
    //
    /**
     * Gets custom_fields
     * @return \Com\Alacriti\Checkout\Client\Model\FieldStringMap
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Com\Alacriti\Checkout\Client\Model\FieldStringMap $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Com\Alacriti\Checkout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Com\Alacriti\Checkout\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


