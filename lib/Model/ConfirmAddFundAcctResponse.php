<?php
/**
 * ConfirmAddFundAcctResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Com\Alacriti\Checkout\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orbipay-Checkout APIs
 *
 * API specification to use the Orbipay-Checkout APIs. This documentation covers the Merchant Account Management and Charge Management related APIs.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: checkout.orbipay@alacriti.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Com\Alacriti\Checkout\Client\Model;

use \ArrayAccess;

/**
 * ConfirmAddFundAcctResponse Class Doc Comment
 *
 * @category    Class
 * @package     Com\Alacriti\Checkout\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConfirmAddFundAcctResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ConfirmAddFundAcct_Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_fields' => 'object',
        'funding_account' => '\Com\Alacriti\Checkout\Client\Model\FundingAccount',
        'payer' => '\Com\Alacriti\Checkout\Client\Model\Payer',
        'customer_account' => '\Com\Alacriti\Checkout\Client\Model\CustomerAccount',
	'error' => '\Com\Alacriti\Checkout\Client\Model\Error'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_fields' => null,
        'funding_account' => null,
        'payer' => null,
        'customer_account' => null,
	'error' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_fields' => 'custom_fields',
        'funding_account' => 'funding_account',
        'payer' => 'payer',
        'customer_account' => 'customer_account',
	'error' => 'error'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'custom_fields' => 'setCustomFields',
        'funding_account' => 'setFundingAccount',
        'payer' => 'setPayer',
        'customer_account' => 'setCustomerAccount',
	'error' => 'setError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'custom_fields' => 'getCustomFields',
        'funding_account' => 'getFundingAccount',
        'payer' => 'getPayer',
        'customer_account' => 'getCustomerAccount',
	'error' => 'getError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['funding_account'] = isset($data['funding_account']) ? $data['funding_account'] : null;
        $this->container['payer'] = isset($data['payer']) ? $data['payer'] : null;
        $this->container['customer_account'] = isset($data['customer_account']) ? $data['customer_account'] : null;
	$this->container['error'] = isset($data['error']) ? $data['error'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets custom_fields
     * @return \Com\Alacriti\Checkout\Client\Model\FieldStringMap
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Com\Alacriti\Checkout\Client\Model\FieldStringMap $custom_fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets funding_account
     * @return \Com\Alacriti\Checkout\Client\Model\FundingAccount
     */
    public function getFundingAccount()
    {
        return $this->container['funding_account'];
    }

    /**
     * Sets funding_account
     * @param \Com\Alacriti\Checkout\Client\Model\FundingAccount $funding_account
     * @return $this
     */
    public function setFundingAccount($funding_account)
    {
        $this->container['funding_account'] = $funding_account;

        return $this;
    }

    /**
     * Gets payer
     * @return \Com\Alacriti\Checkout\Client\Model\Payee
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     * @param \Com\Alacriti\Checkout\Client\Model\Payee $payer
     * @return $this
     */
    public function setPayer($payer)
    {
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets customer_account
     * @return \Com\Alacriti\Checkout\Client\Model\CustomerAccount
     */
    public function getCustomerAccount()
    {
        return $this->container['customer_account'];
    }

    /**
     * Sets customer_account
     * @param \Com\Alacriti\Checkout\Client\Model\CustomerAccount $customer_account
     * @return $this
     */
    public function setCustomerAccount($customer_account)
    {
        $this->container['customer_account'] = $customer_account;

        return $this;
    }

    /**
     * Gets error
     * @return \Com\Alacriti\Checkout\Client\Model\Error
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets Error
     * @param \Com\Alacriti\Checkout\Client\Model\Error
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Com\Alacriti\Checkout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Com\Alacriti\Checkout\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


